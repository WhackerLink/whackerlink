<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Dispatch Console</title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.1.2/socket.io.js" crossorigin="anonymous"></script>
    <style>
        .channel-card { cursor: pointer; margin-bottom: 1rem; }
        .channel-card.online { background-color: #28a745; /* Green */ }
        .channel-card.offline { background-color: #dc3545; /* Red */ }
        .channel-card .card-body { transition: background-color 0.5s; }
    </style>
</head>
<body>
<div class="container">
    <h1>WL Console - DOES NOT WORK YET; WIP - <%= networkName %></h1>
    <div id="channelsContainer" class="row"></div>
</div>

<script>
    const socket = io();
    let activeVoiceChannels = {};
    let rid = '<%= rid %>';

    <% zoneData.forEach(zone => {
    zone.content.forEach(channelInfo => { %>
    createChannelCard({
        channel: "<%= channelInfo[0] %>",
        mode: "<%= channelInfo[1] %>",
        rid: rid
    });
    <% });
    }); %>

    function createChannelCard(channelData) {
        const { channel, mode, rid } = channelData;
        const channelElement = document.createElement('div');
        channelElement.classList.add('channel-card', 'col-md-4', 'offline');
        channelElement.innerHTML = `
            <div class="card mb-4 shadow-sm">
                <div class="card-body">
                    <h5 class="card-title">${channel}</h5>
                    <p class="status">OFF</p>
                    <button class="btn btn-primary toggle-status" onclick="toggleChannel('${channel}')">Toggle Status</button>
                    <button class="btn btn-secondary ptt-button" onmousedown="requestVoiceChannel('${channel}')" onmouseup="releaseVoiceChannel('${channel}')">PTT</button>
                </div>
            </div>
        `;
        document.getElementById('channelsContainer').appendChild(channelElement);
        activeVoiceChannels[channel] = { element: channelElement, status: 'OFF', rid: rid };
    }

    function toggleChannel(channel) {
        const channelStatus = activeVoiceChannels[channel].status;
        if (channelStatus === 'OFF') {
            socket.emit('CHANNEL_AFFILIATION_REQUEST', { srcId: rid, dstId: channel });
        } else {
            socket.emit('REMOVE_AFFILIATION', { srcId: rid, dstId: channel });
        }
    }

    function requestVoiceChannel(channel) {
        socket.emit('VOICE_CHANNEL_REQUEST', { srcId: rid, dstId: channel });
    }

    function releaseVoiceChannel(channel) {
        socket.emit('RELEASE_VOICE_CHANNEL', { srcId: rid, dstId: channel });
    }

    socket.on('CHANNEL_AFFILIATION_GRANTED', data => {
        if (data.srcId === rid && data.dstId in activeVoiceChannels) {
            updateChannelStatus(data.dstId, 'ON');
        }
    });

    socket.on('VOICE_CHANNEL_GRANT', data => {
            //updateChannelStatus(data.dstId, 'TALKING');
        socket.on("VOICE_CHANNEL_GRANT", function (data) {
            //console.log(activeVoiceChannels.channel)
            //console.log(data.srcId)
            //console.log(data.dstId)
            if (data.srcId === "<%=rid%>" && data.dstId === activeVoiceChannels.channel && !inhibit) {
                tpt_generate();
                userStatus.microphone = !userStatus.microphone;
                console.log("Switching to voice channel:", data.newChannel);
                userStatus.voiceChannel = data.newChannel;
                emitUserInformation();
                socket.emit("VOICE_CHANNEL_CONFIRMED", {"srcId": "<%= rid %>", "dstId": activeVoiceChannels.channel});
                voice_channel_granted = true;
                console.log(userStatus.voiceChannel)
                denied = false;
            } else if(data.dstId === activeVoiceChannels.channel && !inhibit) {
                console.log("Switching to voice channel:", data.newChannel);
                userStatus.voiceChannel = data.newChannel;
                emitUserInformation();
                socket.emit("VOICE_CHANNEL_CONFIRMED", {"srcId": "<%= rid %>", "dstId": activeVoiceChannels.channel});
                //updateTextContent("3", `ID: ${data.srcId}`)
            }
        });
    });

    socket.on('VOICE_CHANNEL_RELEASE', data => {
        if (data.srcId === rid && data.dstId in activeVoiceChannels) {
            updateChannelStatus(data.dstId, 'ON');
        }
    });

    socket.on('VOICE_CHANNEL_DENY', data => {
        if (data.srcId === rid && data.dstId in activeVoiceChannels) {
            alert(`Voice channel denied for ${data.dstId}.`);
        }
    });

    function updateChannelStatus(channel, status) {
        const channelElement = activeVoiceChannels[channel].element;
        const statusElement = channelElement.querySelector('.status');
        statusElement.textContent = status;
        if (status === 'ON') {
            channelElement.classList.remove('offline');
            channelElement.classList.add('online');
        } else if (status === 'OFF') {
            channelElement.classList.remove('online');
            channelElement.classList.add('offline');
        } else if (status === 'TALKING') {
        }
        activeVoiceChannels[channel].status = status;
    }
</script>
</body>
</html>
